#version 330 core


// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ


// Inputs
in vec3 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;


void main()
{
	// Implment Phong Shading based on the parameters above
	vec3 L = lightVector.xyz;
	// Ambient
	vec3 Ia = vec3(0.0f,0.0f,0.0f);
	
	// Diffuse
	vec3 Id = vec3(0.0f,0.0f,0.0f);

	// Specular
	vec3 Is = vec3(0.0f,0.0f,0.0f);

	
    if(lightVector.w == 1.0f)
	{
		Ia = materialCoefficients.x * lightColor;

		float cosTheta = max(dot(normal,normalize(L)), 0.0);
		float d = length(L);
		float fAttenuation = 1.0 / (lightAttenuation.x + lightAttenuation.y * d + lightAttenuation.z * (d * d));
		// Diffuse
		Id = fAttenuation * materialCoefficients.y * cosTheta * lightColor;

		// Specular
		vec3 R = reflect(-normalize(L), normal);
		float cosPhi = max(dot(normalize(eyeVector), R), 0.0);
		Is = fAttenuation * materialCoefficients.z * pow(cosPhi, materialCoefficients.w) * lightColor;

		color = (Ia + Id + Is) * v_color;
	}
	else if(lightVector.w == 0.0f)
	{
		Ia = materialCoefficients.x * lightColor;

		float cosTheta = max(dot(normal,normalize(L)), 0.0);
		// Remember that directional light don't have attenuation

		// Diffuse
		Id = materialCoefficients.y * cosTheta * lightColor;

		// Specular
		vec3 R = reflect(-normalize(L), normal);
		float cosPhi = max(dot(normalize(eyeVector), R), 0.0);
		Is = materialCoefficients.z * pow(cosPhi, materialCoefficients.w) * lightColor;

		color = (Ia + Id + Is) * v_color;
	}
}
