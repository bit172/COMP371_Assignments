#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

uniform vec4 materialCoefficients;
uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main()
{
	vec4 textureColor = texture( myTextureSampler, UV );

    // modulate texture color with vertex color
	// Implment Phong Shading based on the parameters above
	vec3 L = lightVector.xyz;
	// Ambient
	vec3 Ia = vec3(0.0f,0.0f,0.0f);
	
	// Diffuse
	vec3 Id = vec3(0.0f,0.0f,0.0f);

	// Specular
	vec3 Is = vec3(0.0f,0.0f,0.0f);
	color = textureColor;
	
    if(lightVector.w == 1.0f)
	{
		Ia = materialCoefficients.x * lightColor;

		float cosTheta = max(dot(normal,normalize(L)), 0.0);
		float d = length(L);
		float fAttenuation = 1.0 / (lightAttenuation.x + lightAttenuation.y * d + lightAttenuation.z * (d * d));
		// Diffuse
		Id = fAttenuation * materialCoefficients.y * cosTheta * lightColor;


		color = ((vec4(Ia,1.0f) + vec4(Id,1.0f)) * v_color) * textureColor;
	}
	else if(lightVector.w == 0.0f)
	{
		Ia = materialCoefficients.x * lightColor;

		float cosTheta = max(dot(normal,normalize(L)), 0.0);
		// Remember that directional light don't have attenuation

		// Diffuse
		Id = materialCoefficients.y * cosTheta * lightColor;

		color = ((vec4(Ia,1.0f) + vec4(Id,1.0f)) * v_color) * textureColor;
	}

    // Alpha test - Discard Fragment below treshold
    if(color.a <= 0.02f)
        discard;
}