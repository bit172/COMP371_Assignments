#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 vertexUV;


// Uniform Inputs
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;

// Light
uniform vec4 WorldLightPosition;

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex
out vec4 v_color;
out vec2 UV;

void main()
{
	// Output position of the vertex, in clip space : MVP * position
    gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace, 1.0f);

    mat4 MV = ViewTransform * WorldTransform;

	normal = mat3(transpose(inverse(MV))) * vertexNormal_modelspace;
	
	vec4 ViewLightPosition = ViewTransform * WorldLightPosition;
	vec4 vertexPosition_viewspace = MV * vec4(vertexPosition_modelspace, 1.0f);
	
	eyeVector = normalize(vec3(transpose(ViewTransform)[3] - vertexPosition_viewspace));
	if (WorldLightPosition.w == 1.0f)
	{
		lightVector = ViewLightPosition - vertexPosition_viewspace;
	}
	else if (WorldLightPosition.w == 0.0f)
	{
		lightVector = ViewLightPosition;
	}

	v_color = vertexColor;
	UV = vertexUV;
}

